#!/usr/bin/env python3
"""
Package CountyDataSync for distribution.

This script creates a complete distribution package with the standalone executable,
configuration files, and documentation.

Usage:
    python package_application.py [--version VERSION]

Arguments:
    --version VERSION: Version string to use for the package (default: current date)
"""
import os
import sys
import time
import shutil
import argparse
import logging
import subprocess
from datetime import datetime
from pathlib import Path
import zipfile

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('PackageApplication')

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description='Package CountyDataSync for distribution')
    parser.add_argument('--version', type=str, 
                        default=datetime.now().strftime('%Y%m%d'),
                        help='Version string to use for the package (default: current date)')
    return parser.parse_args()

def build_executable():
    """Build the executable using build_executable.py."""
    logger.info("Building executable...")
    
    cmd = [sys.executable, 'build_executable.py']
    
    try:
        process = subprocess.run(cmd, capture_output=True, text=True)
        
        if process.returncode == 0:
            logger.info("Executable built successfully")
            return True
        else:
            logger.error(f"Error building executable: {process.stderr.strip()}")
            return False
    except Exception as e:
        logger.error(f"Error running build_executable.py: {e}")
        return False

def copy_documentation(dist_dir):
    """Copy documentation files to distribution directory."""
    logger.info("Copying documentation files...")
    
    docs = [
        'README.md',
        'INSTALLATION.md',
        'PACKAGING.md',
        'CI_CD_GUIDE.md',
        'CI_CD_GUIDE_ETL.md',
    ]
    
    for doc in docs:
        if os.path.exists(doc):
            try:
                shutil.copy2(doc, os.path.join(dist_dir, doc))
                logger.info(f"Copied {doc}")
            except Exception as e:
                logger.warning(f"Could not copy {doc}: {e}")

def copy_config_files(dist_dir):
    """Copy configuration files to distribution directory."""
    logger.info("Copying configuration files...")
    
    # Copy .env.example
    if os.path.exists('.env.example'):
        try:
            shutil.copy2('.env.example', os.path.join(dist_dir, '.env.example'))
            logger.info("Copied .env.example")
        except Exception as e:
            logger.warning(f"Could not copy .env.example: {e}")
    
    # Copy config.py
    if os.path.exists('config.py'):
        try:
            shutil.copy2('config.py', os.path.join(dist_dir, 'config.py'))
            logger.info("Copied config.py")
        except Exception as e:
            logger.warning(f"Could not copy config.py: {e}")

def create_directory_structure(dist_dir):
    """Create necessary directories in the distribution package."""
    logger.info("Creating directory structure...")
    
    dirs = ['logs', 'output', 'data']
    
    for d in dirs:
        dir_path = os.path.join(dist_dir, d)
        os.makedirs(dir_path, exist_ok=True)
        logger.info(f"Created directory: {d}")
    
    # Add a README file in each directory explaining its purpose
    with open(os.path.join(dist_dir, 'logs', 'README.txt'), 'w') as f:
        f.write('This directory contains log files generated by CountyDataSync.\n')
    
    with open(os.path.join(dist_dir, 'output', 'README.txt'), 'w') as f:
        f.write('This directory will contain output files generated by the ETL process.\n')
    
    with open(os.path.join(dist_dir, 'data', 'README.txt'), 'w') as f:
        f.write('Place input data files in this directory for processing.\n')

def create_distribution_package(version):
    """Create distribution package."""
    logger.info(f"Creating distribution package version {version}...")
    
    # Check if executable exists
    dist_dir = Path('dist')
    if not dist_dir.exists():
        logger.error("dist directory not found. Build executable first.")
        return False
    
    executables = list(dist_dir.glob('CountyDataSync*'))
    if not executables:
        logger.error("No executable found in dist directory. Build executable first.")
        return False
    
    # Create a temporary directory for the package
    package_dir = f"CountyDataSync-{version}"
    if os.path.exists(package_dir):
        shutil.rmtree(package_dir)
    os.makedirs(package_dir)
    
    # Copy the executable
    executable_path = executables[0]
    shutil.copy2(executable_path, os.path.join(package_dir, executable_path.name))
    logger.info(f"Copied executable to package directory: {executable_path.name}")
    
    # Copy documentation
    copy_documentation(package_dir)
    
    # Copy configuration files
    copy_config_files(package_dir)
    
    # Create directory structure
    create_directory_structure(package_dir)
    
    # Create a README file
    with open(os.path.join(package_dir, 'README.txt'), 'w') as f:
        f.write(f"""
CountyDataSync ETL System v{version}
====================================

This package contains the CountyDataSync application for processing county parcel data.

Contents:
- CountyDataSync executable: Standalone program for running the ETL process
- logs/: Directory for log files
- output/: Directory for output files
- data/: Directory for input data files
- Documentation files

Usage:
  ./CountyDataSync --help

For more information, see the included documentation files.
""")
    
    # Create a zip archive
    zip_filename = f"{package_dir}.zip"
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(package_dir):
            for file in files:
                file_path = os.path.join(root, file)
                zipf.write(file_path, os.path.relpath(file_path, os.path.dirname(package_dir)))
    
    logger.info(f"Created distribution package: {zip_filename}")
    
    # Clean up temporary directory
    shutil.rmtree(package_dir)
    
    return zip_filename

def main():
    """Main entry point."""
    args = parse_arguments()
    
    start_time = time.time()
    logger.info("Starting packaging process for CountyDataSync")
    
    # Build the executable
    if not build_executable():
        logger.error("Failed to build executable. Cannot continue.")
        return 1
    
    # Create distribution package
    package_file = create_distribution_package(args.version)
    
    if package_file:
        elapsed_time = time.time() - start_time
        logger.info(f"Packaging process completed in {elapsed_time:.2f} seconds")
        logger.info(f"Distribution package created: {package_file}")
        return 0
    else:
        logger.error("Failed to create distribution package")
        return 1

if __name__ == "__main__":
    sys.exit(main())